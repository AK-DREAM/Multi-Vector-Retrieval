INFO 03-19 10:11:53 model_runner.py:1071] Loading model weights took 13.1342 GBINFO 03-19 10:11:55 gpu_executor.py:122] # GPU blocks: 7347, # CPU blocks: 512INFO 03-19 10:11:55 gpu_executor.py:126] Maximum concurrency for 2048 tokens per request: 57.40xINFO 03-19 10:11:56 model_runner.py:1402] Capturing the model for CUDA graphs. This may lead to unexpected consequences if the model is not static. To run the model in eager mode, set 'enforce_eager=True' or use '--enforce-eager' in the CLI.INFO 03-19 10:11:56 model_runner.py:1406] CUDA graphs can take additional 1~3 GiB memory per GPU. If you are running out of memory, consider decreasing `gpu_memory_utilization` or enforcing eager mode. You can also reduce the `max_num_seqs` as needed to decrease memory usage.INFO 03-19 10:12:10 model_runner.py:1530] Graph capturing finished in 14 secs.query loading  0%|                                                                                                          | 0/18954 [00:00<?, ?it/s] 27%|████████████████████████▊                                                                   | 5116/18954 [00:00<00:00, 51154.93it/s] 55%|█████████████████████████████████████████████████▉                                         | 10400/18954 [00:00<00:00, 52142.33it/s] 83%|███████████████████████████████████████████████████████████████████████████▎               | 15682/18954 [00:00<00:00, 52447.43it/s]100%|███████████████████████████████████████████████████████████████████████████████████████████| 18954/18954 [00:00<00:00, 52417.18it/s]images loading0it [00:00, ?it/s]104136it [00:00, 1041333.68it/s]214611it [00:00, 1078617.95it/s]325556it [00:00, 1092681.31it/s]389740it [00:00, 1070315.15it/s]/home/icml01/anaconda3/envs/colpali/lib/python3.10/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.  return torch.load(io.BytesIO(b))0it [00:00, ?it/s]1it [00:02,  2.40s/it]2it [00:04,  2.47s/it]3it [00:07,  2.66s/it]4it [00:10,  2.52s/it]5it [00:11,  2.16s/it]6it [00:13,  2.22s/it]7it [00:16,  2.34s/it]8it [00:18,  2.23s/it]9it [00:20,  2.00s/it]10it [00:22,  2.02s/it]11it [00:24,  2.11s/it]12it [00:27,  2.44s/it]13it [00:30,  2.51s/it]14it [00:33,  2.75s/it]